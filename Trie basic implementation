 // structure of trie
struct node{                                         
    node *link[26];
    bool flag = false;
    
    bool containskey(char ch){
        return (link[ch-'a']!=NULL);
    }
    node *get(char ch){
        return link[ch-'a'];
    }
    void put(char ch,node *nodee){
        link[ch-'a'] = nodee;
    }
    void setend(){
        flag = true;
    }
    bool isend(){
        return flag;
    }
};
class Trie {
    private: node *root;
public:
    Trie() {
        root = new node();
    }
    
    
    
    
    // insertion of new word in trie
    
    void insert(string word) {                          
        node *nodee = root;
        for(int i=0;i<word.length();i++){
            if(!nodee->containskey(word[i])){
                nodee->put(word[i],new node());
            }
            nodee = nodee->get(word[i]);
        }
        nodee->setend();
    }
    
    
    // search if word exist in trie
    
    bool search(string word) {                            
        node *nodee = root;
        for(int i=0;i<word.length();i++){
            if(!nodee->containskey(word[i])){
                return false;
            }
            nodee = nodee->get(word[i]);
        }
        if(nodee->isend()){
            return true;
        }
        return false;
    }
    
   
    
    // search if any word exist in trie whoose prefix/start with given prefix
    
    bool startsWith(string prefix) {   
        node *nodee = root;
        for(int i=0;i<prefix.length();i++){
            if(!nodee->containskey(prefix[i])){
                return false;
            }
            nodee = nodee->get(prefix[i]);
        }
        return true;
    }
};
